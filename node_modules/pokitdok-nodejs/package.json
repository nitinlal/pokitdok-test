{
  "name": "pokitdok-nodejs",
  "description": "PokitDok Platform API Client for NodeJS. https://platform.pokitdok.com",
  "tags": [
    "health",
    "api",
    "pokitdok",
    "X12",
    "eligibility",
    "claims",
    "providers",
    "prices",
    "healthcare"
  ],
  "version": "0.0.7",
  "author": {
    "name": "PokitDok"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/pokitdok/pokitdok-nodejs.git"
  },
  "bugs": {
    "url": "http://github.com/pokitdok/pokitdok-nodejs/issues"
  },
  "license": "MIT",
  "engines": [
    "node >= 0.8.0"
  ],
  "main": "index.js",
  "dependencies": {
    "lodash": "^2.4.1",
    "request": "^2.37.0"
  },
  "devDependencies": {
    "async": "^0.9.0",
    "mocha": "^1.21.4",
    "jsdoc-to-markdown": "^0.5.5"
  },
  "scripts": {
    "docs": "jsdoc2md -t docs/README.hbs index.js > README.md"
  },
  "readme": "pokitdok-nodejs\n=============\n\nPokitDok Platform API Client for NodeJS\n\n![alt tag](https://pbs.twimg.com/profile_images/1557833527/alwaysbetonjs.png)\n\n## Resources\n* [Read the PokitDok API docs][apidocs]\n* [View the pokitdok-nodejs API Reference](#PokitDok)\n* [View Source on GitHub][code]\n* [Report Issues on GitHub][issues]\n\n[apidocs]: https://platform.pokitdok.com/documentation/v4#/\n[code]: https://github.com/PokitDok/pokitdok-nodejs\n[issues]: https://github.com/PokitDok/pokitdok-nodejs/issues\n\n## Installation\n```bash\nnpm install pokitdok-nodejs\n```\n\n## Supported NodeJS versions\nThis library aims to support and is tested against these NodeJS versions, using travis-ci:\n* 0.8.x\n* 0.9.x\n* 0.10.x\n\n## API Reference\n<a name=\"PokitDok\"></a>\n##class: PokitDok\n**Members**\n\n* [class: PokitDok](#PokitDok)\n  * [new PokitDok(clientId, clientSecret, version)](#new_PokitDok)\n  * [pokitDok.activities(options, callback)](#PokitDok#activities)\n  * [pokitDok.authorizations(options, callback)](#PokitDok#authorizations)\n  * [pokitDok.cashPrices(options, callback)](#PokitDok#cashPrices)\n  * [pokitDok.claims(options, callback)](#PokitDok#claims)\n  * [pokitDok.claimStatus(options, callback)](#PokitDok#claimStatus)\n  * [pokitDok.eligibility(options, callback)](#PokitDok#eligibility)\n  * [pokitDok.enrollment(options, callback)](#PokitDok#enrollment)\n  * [pokitDok.files(fileReadStream, callback)](#PokitDok#files)\n  * [pokitDok.insurancePrices(options, callback)](#PokitDok#insurancePrices)\n  * [pokitDok.payers(callback)](#PokitDok#payers)\n  * [pokitDok.providers(options, callback)](#PokitDok#providers)\n  * [pokitDok.referrals(options, callback)](#PokitDok#referrals)\n  * [pokitDok.tradingPartners(callback)](#PokitDok#tradingPartners)\n  * [pokitDok.plans(options, callback)](#PokitDok#plans)\n\n<a name=\"new_PokitDok\"></a>\n###new PokitDok(clientId, clientSecret, version)\nCreate a connection to the pokitdok API. The version defaults to v4. You must enter your client ID and client secret\nor all requests made with your connection will return errors.\n\n**Params**\n\n- clientId `string` - The client id of your PokitDok App  \n- clientSecret `string` - The client secret of your PokitDok App  \n- version `string` - the version of the API the connection should use  \n\n**Example**  \n```js\n// get a connection to the PokitDok Platform for the most recent version\nvar PokitDok = require('pokitdok-nodejs');\nvar pokitdok = new PokitDok(process.env.POKITDOK_CLIENT_ID, process.env.POKITDOK_CLIENT_SECRET);\n```\n\n**Example**  \n```js\n// get a connection to the PokitDok Platform for version 3\nvar PokitDok = require('pokitdok-nodejs');\nvar pokitdokV3 = new PokitDok(process.env.POKITDOK_CLIENT_ID, process.env.POKITDOK_CLIENT_SECRET, 'v3');\n```\n\n<a name=\"PokitDok#activities\"></a>\n###pokitDok.activities(options, callback)\nGet a list of activities from the API. If an id is passed with the options, get a single activity. You can also\nchange the state of an activity by passing the desired state (pause, cancel, resume) in the transition key.\n\n**Params**\n\n- options `object` - keys: id, transition  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// get a list of activities\npokitdok.activities({}, function(err, res){\n    if(err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the activity name status and id\n    for (var i = 0, ilen = res.data.length; i < ilen; i++) {\n        var activity = res.data[i];\n        console.log(activity.id + ':' + activity.name + ':' + activity.state.name);\n    }\n});\n```\n\n**Example**  \n```js\n// get a single activity\npokitdok.activities({\n    id: '5317f51527a27620f2ec7533'\n}, function(err, res){\n    if(err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the activity name status and id\n    console.log(res.data.id + ':' + res.data.name + ':' + res.data.state.name);\n});\n```\n\n**Example**  \n```js\n// cancel an  activity\npokitdok.activities({\n    id: '5317f51527a27620f2ec7533',\n    transition: 'cancel'\n}, function(err, res){\n    if(err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the activity name status and id\n    console.log(res.data.id + ':' + res.data.name + ':' + res.data.state.name);\n});\n```\n\n<a name=\"PokitDok#authorizations\"></a>\n###pokitDok.authorizations(options, callback)\nThe Authorizations resource allows an application to submit a request for the\nreview of health care in order to obtain an authorization for that health care.\n\n**Params**\n\n- options `object` - the authorizations query  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// submit an authorizations request\npokitdok.authorizations({\n    event: {\n           category: 'health_services_review',\n           certification_type: 'initial',\n           delivery: {\n               quantity: 1,\n               quantity_qualifier: 'visits'\n           },\n           diagnoses: [\n               {\n                   code: '789.00',\n                   date: '2014-10-01'\n               }\n           ],\n           place_of_service: 'office',\n           provider: {\n               organization_name: 'KELLY ULTRASOUND CENTER, LLC',\n               npi: '1760779011',\n               phone: '8642341234'\n           },\n           services: [\n               {\n                   cpt_code: '76700',\n                   measurement: 'unit',\n                   quantity: 1\n               }\n           ],\n           type: 'diagnostic_imaging'\n       },\n       patient: {\n           birth_date: '1970-01-01',\n           first_name: 'JANE',\n           last_name: 'DOE',\n           id: '1234567890'\n       },\n       provider: {\n           first_name: 'JEROME',\n           npi: '1467560003',\n           last_name: 'AYA-AY'\n       },\n       trading_partner_id: 'MOCKPAYER'\n}, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the correlation_id and trading_partner_id of the authorization\n    console.log(res.data.correlation_id + ':' + res.data.trading_partner_id);\n});\n```\n\n<a name=\"PokitDok#cashPrices\"></a>\n###pokitDok.cashPrices(options, callback)\nGet a list of cash prices for a particular CPT Code in a specific Zip Code\n\n**Params**\n\n- options `object` - keys: cpt_code, zip_code  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// print the procedure code and price for a particular zip/cpt combination\npokitdok.cashPrices({\n        zip_code: '94401',\n        cpt_code: '90658'\n    }, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the cpt, geo_zip and average price\n    for (var i = 0, ilen = res.data.length; i < ilen; i++) {\n        var price = res.data[i];\n        console.log(price.cpt_code + ':' + price.geo_zip_area +  ':' + price.average);\n    }\n});\n```\n\n<a name=\"PokitDok#claims\"></a>\n###pokitDok.claims(options, callback)\nSubmit a claim for processing. The API calls back with an activity object that tracks the state of the claim.\n\n**Params**\n\n- options `object` - the claim document  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// submit a claim document\npokitdok.claims({\n    transaction_code: 'chargeable',\n    trading_partner_id: 'MOCKPAYER',\n    billing_provider: {\n        taxonomy_code: '207Q00000X',\n        first_name: 'Jerome',\n        last_name: 'Aya-Ay',\n        npi: '1467560003',\n        address: {\n            address_lines: [\n                '8311 WARREN H ABERNATHY HWY'\n            ],\n            city: 'SPARTANBURG',\n            state: 'SC',\n            zipcode: '29301'\n        },\n        tax_id: '123456789'\n    },\n    subscriber: {\n        first_name: 'Jane',\n        last_name: 'Doe',\n        member_id: 'W000000000',\n        address: {\n            address_lines: ['123 N MAIN ST'],\n            city: 'SPARTANBURG',\n            state: 'SC',\n            zipcode: '29301'\n        },\n        birth_date: '1970-01-01',\n        gender: 'female'\n    },\n    claim: {\n        total_charge_amount: 60.0,\n        service_lines: [\n            {\n                procedure_code: '99213',\n                charge_amount: 60.0,\n                unit_count: 1.0,\n                diagnosis_codes: [\n                    '487.1'\n                ],\n                service_date: '2014-06-01'\n            }\n        ]\n    }\n}, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the activity id, name and state\n    console.log(res.data.id + ':' + res.data.name + ':' + res.data.state.name);\n});\n```\n\n<a name=\"PokitDok#claimStatus\"></a>\n###pokitDok.claimStatus(options, callback)\nGet the status of a submitted claim from the specified trading partner. You can specify a specific tracking id if\nyou have one from the original claim.\n\n**Params**\n\n- options `object` - the claim status query  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// get the status of a claim using a date range and tracking id\npokitdok.claimStatus({\n    patient: {\n        birth_date: '1970-01-01',\n        first_name: 'JANE',\n        last_name: 'DOE',\n        id: '1234567890'\n    },\n    provider: {\n        first_name: 'Jerome',\n        last_name: 'Aya-Ay',\n        npi: '1467560003',\n    },\n    service_date: '2014-01-01',\n    service_end_date: '2014-01-04',\n    trading_partner_id: 'MOCKPAYER',\n    tracking_id: 'ABC12345'\n}, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the correlation_id and trading_partner_id of the claim\n    console.log(res.data.correlation_id + ':' + res.data.trading_partner_id);\n});\n```\n\n<a name=\"PokitDok#eligibility\"></a>\n###pokitDok.eligibility(options, callback)\nGet an eligibility response from a trading partner based on the provided eligibility document (provider, member,\ncpt code, service_types)\n\n**Params**\n\n- options `object` - keys: provider, service_types, member, cpt_code, trading_partner_id  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// get general eligibility for a member for a specific provider\npokitdok.eligibility({\n    member: {\n        birth_date: '1970-01-01',\n        first_name: 'Jane',\n        last_name: 'Doe',\n        id: 'W000000000'\n    },\n    provider: {\n        first_name: 'JEROME',\n        last_name: 'AYA-AY',\n        npi: '1467560003'\n    },\n    service_types: ['health_benefit_plan_coverage'],\n    trading_partner_id: 'MOCKPAYER'\n}, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the member eligibility for the specified provider\n    console.log(res.data);\n});\n```\n\n**Example**  \n```js\n// get eligibility for a member for a specific CPT code\npokitdok.eligibility({\n    member: {\n        birth_date: '1970-01-01',\n        first_name: 'Jane',\n        last_name: 'Doe',\n        id: 'W000000000'\n    },\n    provider: {\n        first_name: 'JEROME',\n        last_name: 'AYA-AY',\n        npi: '1467560003'\n    },\n    cpt_code: '81291',\n    trading_partner_id: 'MOCKPAYER'\n}, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the member eligibility for the specified CPT code\n    console.log(res.data);\n});\n```\n\n<a name=\"PokitDok#enrollment\"></a>\n###pokitDok.enrollment(options, callback)\nGet an enrollment response from a trading partner based on the provided enrollment document (provider, member,\ncpt code, service_types)\n\n**Params**\n\n- options `object` - keys: provider, service_types, member, cpt_code, trading_partner_id  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// get general enrollment for a member for a specific provider\npokitdok.enrollment({\n    member: {\n        birth_date: '1970-01-01',\n        first_name: 'Jane',\n        last_name: 'Doe',\n        id: 'W000000000'\n    },\n    provider: {\n        first_name: 'JEROME',\n        last_name: 'AYA-AY',\n        npi: '1467560003'\n    },\n    service_types: ['health_benefit_plan_coverage'],\n    trading_partner_id: 'MOCKPAYER'\n}, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the member enrollment for the specified provider\n    console.log(res.data);\n});\n```\n\n<a name=\"PokitDok#files\"></a>\n###pokitDok.files(fileReadStream, callback)\nSubmit a raw X12 file to the pokitdok platform for processing\n\n**Params**\n\n- fileReadStream `FileReadStream`  \n- callback `function`  \n\n<a name=\"PokitDok#insurancePrices\"></a>\n###pokitDok.insurancePrices(options, callback)\nGet a list of insurance prices for a particular CPT Code in a specific Zip Code\n\n**Params**\n\n- options `object` - keys: cpt_code, zip_code  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// print the procedure code and price for a particular zip/cpt combination\npokitdok.insurancePrices({\n        zip_code: '94401',\n        cpt_code: '90658'\n    }, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the cpt and geo_zip\n    console.log(res.data.cpt_code + ':' + res.data.geo_zip_area);\n    // print the average price per payment types\n    for (var i = 0, ilen = res.data.amounts.length; i < ilen; i++) {\n        var price = res.data.amounts[i];\n        console.log(price.payment_type + ':' + price.average);\n    }\n});\n```\n\n<a name=\"PokitDok#payers\"></a>\n###pokitDok.payers(callback)\nGet a list of payers from the API for use in other EDI transactions.\n\n**Params**\n\n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// print the trading partner id's, used to identify a payer for other EDI transaction\npokitdok.payers(function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the name and trading_partner_id of each payer\n    for (var i = 0, ilen = res.data.length; i < ilen; i++) {\n        var payer = res.data[i];\n        console.log(payer.payer_name + ':' + payer.trading_partner_id);\n    }\n});\n```\n\n<a name=\"PokitDok#providers\"></a>\n###pokitDok.providers(options, callback)\nSearch health care providers in the PokitDok directory. When an id is specified in the options object, a single\nprovider or a 404 error response is returned.  When a npi is specified on the options object, a single provider or\n404 error is returned. Use any of the other available options to return a list of providers.\n\n**Params**\n\n- options `object` - keys: npi, zipcode, radius, first_name, last_name, specialty, organization_name, limit  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// get a list of providers based on the filters provided\npokitdok.providers({\n    zipcode: 94118,\n    last_name: 'shen',\n    radius: '10mi',\n    limit: 2\n}, function(err, res){\n    if(err) {\n        return console.log(err, res.statusCode);\n    }\n    // res.data is a list of results\n    for(var i=0, ilen=res.data.length; i < ilen; i++) {\n        var provider = res.data[i].provider;\n        console.log(provider.first_name + ' ' + provider.last_name);\n    }\n});\n```\n\n**Example**  \n```js\n// get a provider using a npi id\npokitdok.providers({\n    npi: '1881692002'\n}, function(err, res){\n    if(err) {\n        return console.log(err, res.statusCode);\n    }\n    // res.data is a single result\n    console.log(res.data.provider.first_name + ' ' + res.data.provider.last_name);\n});\n```\n\n<a name=\"PokitDok#referrals\"></a>\n###pokitDok.referrals(options, callback)\nThe Referrals resource allows an application to request approval for a referral to another health care provider.\n\n**Params**\n\n- options `object` - the authorizations query  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// submit a referral request for approval\npokitdok.referrals({\n    event: {\n           category: 'specialty_care_review',\n           certification_type: 'initial',\n           delivery: {\n               quantity: 1,\n               quantity_qualifier: 'visits'\n           },\n           diagnoses: [\n               {\n                   code: '384.20',\n                   date: '2014-09-30'\n               }\n           ],\n           place_of_service: 'office',\n           provider: {\n               first_name: 'JOHN',\n               npi: '1154387751',\n               last_name: 'FOSTER',\n               phone: '8645822900'\n           },\n           type: 'consultation'\n       },\n       patient: {\n           birth_date: '1970-01-01',\n           first_name: 'JANE',\n           last_name: 'DOE',\n           id: '1234567890'\n       },\n       provider: {\n           first_name: 'CHRISTINA',\n           last_name: 'BERTOLAMI',\n           npi: '1619131232'\n       },\n       trading_partner_id: 'MOCKPAYER'\n}, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the correlation_id and trading_partner_id of the referral\n    console.log(res.data.correlation_id + ':' + res.data.trading_partner_id);\n});\n```\n\n<a name=\"PokitDok#tradingPartners\"></a>\n###pokitDok.tradingPartners(callback)\nGet a list of trading partners from the API for use in other EDI transactions.\n\n**Params**\n\n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// print the trading partner id's, used to identify a payer for other EDI transaction\npokitdok.tradingPartners(function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the name and trading_partner_id of each trading partner\n    for (var i = 0, ilen = res.data.length; i < ilen; i++) {\n        var tradingPartner = res.data[i];\n        console.log(tradingPartner.name + ':' + tradingPartner.id);\n    }\n});\n```\n\n**Example**  \n```js\n// print a single trading partner\npokitdok.tradingPartners({id:'MOCKPAYER'}, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    console.log(res.data.name + ':' + res.data.id);\n});\n```\n\n<a name=\"PokitDok#plans\"></a>\n###pokitDok.plans(options, callback)\nGet information about available plans based on parameters given\n\n**Params**\n\n- options `object` - keys: trading_partner_id, county, state, plan_id, plan_type, plan_name, metallic_level  \n- callback `function` - a callback function that accepts an error and response parameter  \n\n**Example**  \n```js\n// fetch any plan information\npokitdok.plans(function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the plan names and ids\n    for (var i = 0, ilen = res.data.length; i < ilen; i++) {\n        var plan = res.data[i];\n        console.log(plan.plan_name + ':' + plan.plan_id);\n    }\n});\n```\n\n**Example**  \n```js\n// fetch plan information for PPOs in Texas\npokitdok.plans({plan_type:'PPO', state: 'TX'}, function (err, res) {\n    if (err) {\n        return console.log(err, res.statusCode);\n    }\n    // print the plan names and ids\n    for (var i = 0, ilen = res.data.length; i < ilen; i++) {\n        var plan = res.data[i];\n        console.log(plan.plan_name + ':' + plan.plan_id);\n    }\n});\n```\n\n\n\n## License\nCopyright (c) 2014 PokitDok Inc. See [LICENSE][] for details.\n\n[license]: LICENSE.txt",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/pokitdok/pokitdok-nodejs",
  "_id": "pokitdok-nodejs@0.0.7",
  "dist": {
    "shasum": "d2769c5f67ee197c092fddc6ae17b29ff4bfd909"
  },
  "_from": "pokitdok-nodejs@",
  "_resolved": "https://registry.npmjs.org/pokitdok-nodejs/-/pokitdok-nodejs-0.0.7.tgz"
}
